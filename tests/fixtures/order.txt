<?php

/**
 * Autogenerated by SeederGenerator
 *
 * DO NOT EDIT DIRECTLY
 */

declare(strict_types=1);

namespace DbSeeder;

class Order implements \SeederGenerator\Fixture
{
	/** @var \SeederGenerator\Fixture[] */
	public array $dependencies = [];


	public function __construct(
		protected readonly int $id,
		protected readonly ?string $externalCode,
		protected readonly string $state,
		protected readonly ?string $externalComment,
		protected readonly ?string $internalComment,
		protected readonly ?string $invoiceNumber,
		protected readonly ?string $invoiceUrl,
		protected readonly ?string $proofOfDeliveryUrl,
		protected readonly ?int $merchantDebtorId,
		protected readonly ?int $merchantId,
		protected readonly string $purchaseCountryCode,
		protected readonly int $deliveryAddressId,
		protected readonly int $debtorPersonId,
		protected readonly int $debtorExternalDataId,
		protected readonly ?array $partnerExternalData,
		protected readonly ?int $checkoutSessionId,
		protected readonly string $workflowName,
		protected readonly string $currencyCode,
		protected readonly ?\DateTimeImmutable $expiration,
		protected readonly ?string $debtorSepaMandateUuid,
		protected readonly string $uuid,
		protected readonly ?string $rid,
		protected readonly ?\DateTimeImmutable $markedAsFraudAt,
		protected readonly \DateTimeImmutable $createdAt,
		protected readonly \DateTimeImmutable $updatedAt,
		protected readonly int $version,
		protected readonly ?string $companyBillingAddressUuid,
		protected readonly string $creationSource,
		protected readonly ?string $paymentMethod,
		protected readonly ?string $acquiringChannel,
		protected readonly ?string $intent,
	) {
	}


	public static function make(
		?int $id = null,
		?string $externalCode = null,
		?string $state = null,
		?string $externalComment = null,
		?string $internalComment = null,
		?string $invoiceNumber = null,
		?string $invoiceUrl = null,
		?string $proofOfDeliveryUrl = null,
		int|MerchantsDebtor|null $merchantDebtorId = null,
		int|Merchant|null $merchantId = null,
		?string $purchaseCountryCode = null,
		int|Address|null $deliveryAddressId = null,
		int|Person|null $debtorPersonId = null,
		int|DebtorExternalDatum|null $debtorExternalDataId = null,
		?array $partnerExternalData = null,
		int|CheckoutSession|null $checkoutSessionId = null,
		?string $workflowName = null,
		?string $currencyCode = null,
		?\DateTimeImmutable $expiration = null,
		?string $debtorSepaMandateUuid = null,
		?string $uuid = null,
		?string $rid = null,
		?\DateTimeImmutable $markedAsFraudAt = null,
		?\DateTimeImmutable $createdAt = null,
		?\DateTimeImmutable $updatedAt = null,
		?int $version = null,
		?string $companyBillingAddressUuid = null,
		?string $creationSource = null,
		?string $paymentMethod = null,
		?string $acquiringChannel = null,
		?string $intent = null,
	): self
	{
		$valueResolver = new \SeederGenerator\ValueResolver(self::meta(), '/path/to/seeder.config.php');

		if (null === $merchantDebtorId) {
		    $merchantDebtorId = MerchantsDebtor::make();
		}
		if (null === $merchantId) {
		    $merchantId = Merchant::make();
		}
		if (null === $deliveryAddressId) {
		    $deliveryAddressId = Address::make();
		}
		if (null === $debtorPersonId) {
		    $debtorPersonId = Person::make();
		}
		if (null === $debtorExternalDataId) {
		    $debtorExternalDataId = DebtorExternalDatum::make();
		}
		if (null === $checkoutSessionId) {
		    $checkoutSessionId = CheckoutSession::make();
		}

		$fixture = new self(
			id: $valueResolver->resolve($id, 'id'),
			externalCode: $valueResolver->resolve($externalCode, 'external_code'),
			state: $valueResolver->resolve($state, 'state'),
			externalComment: $valueResolver->resolve($externalComment, 'external_comment'),
			internalComment: $valueResolver->resolve($internalComment, 'internal_comment'),
			invoiceNumber: $valueResolver->resolve($invoiceNumber, 'invoice_number'),
			invoiceUrl: $valueResolver->resolve($invoiceUrl, 'invoice_url'),
			proofOfDeliveryUrl: $valueResolver->resolve($proofOfDeliveryUrl, 'proof_of_delivery_url'),
			merchantDebtorId: $valueResolver->resolve($merchantDebtorId, 'merchant_debtor_id'),
			merchantId: $valueResolver->resolve($merchantId, 'merchant_id'),
			purchaseCountryCode: $valueResolver->resolve($purchaseCountryCode, 'purchase_country_code'),
			deliveryAddressId: $valueResolver->resolve($deliveryAddressId, 'delivery_address_id'),
			debtorPersonId: $valueResolver->resolve($debtorPersonId, 'debtor_person_id'),
			debtorExternalDataId: $valueResolver->resolve($debtorExternalDataId, 'debtor_external_data_id'),
			partnerExternalData: $valueResolver->resolve($partnerExternalData, 'partner_external_data'),
			checkoutSessionId: $valueResolver->resolve($checkoutSessionId, 'checkout_session_id'),
			workflowName: $valueResolver->resolve($workflowName, 'workflow_name'),
			currencyCode: $valueResolver->resolve($currencyCode, 'currency_code'),
			expiration: $valueResolver->resolve($expiration, 'expiration'),
			debtorSepaMandateUuid: $valueResolver->resolve($debtorSepaMandateUuid, 'debtor_sepa_mandate_uuid'),
			uuid: $valueResolver->resolve($uuid, 'uuid'),
			rid: $valueResolver->resolve($rid, 'rid'),
			markedAsFraudAt: $valueResolver->resolve($markedAsFraudAt, 'marked_as_fraud_at'),
			createdAt: $valueResolver->resolve($createdAt, 'created_at'),
			updatedAt: $valueResolver->resolve($updatedAt, 'updated_at'),
			version: $valueResolver->resolve($version, 'version'),
			companyBillingAddressUuid: $valueResolver->resolve($companyBillingAddressUuid, 'company_billing_address_uuid'),
			creationSource: $valueResolver->resolve($creationSource, 'creation_source'),
			paymentMethod: $valueResolver->resolve($paymentMethod, 'payment_method'),
			acquiringChannel: $valueResolver->resolve($acquiringChannel, 'acquiring_channel'),
			intent: $valueResolver->resolve($intent, 'intent'),
		);

		if ($merchantDebtorId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($merchantDebtorId);
		}
		if ($merchantId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($merchantId);
		}
		if ($deliveryAddressId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($deliveryAddressId);
		}
		if ($debtorPersonId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($debtorPersonId);
		}
		if ($debtorExternalDataId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($debtorExternalDataId);
		}
		if ($checkoutSessionId instanceof \SeederGenerator\Fixture) {
		    $fixture->with($checkoutSessionId);
		}

		return $fixture;
	}


	public function with(\SeederGenerator\Fixture $fixture): self
	{
		$this->dependencies[] = $fixture;
		return $this;
	}


	/**
	 * @return \SeederGenerator\Fixture[]
	 */
	public function dependencies(): array
	{
		return $this->dependencies;
	}


	public function tableName(): string
	{
		return 'orders';
	}


	public function fields(): array
	{
		return ['id', 'external_code', 'state', 'external_comment', 'internal_comment', 'invoice_number', 'invoice_url', 'proof_of_delivery_url', 'merchant_debtor_id', 'merchant_id', 'purchase_country_code', 'delivery_address_id', 'debtor_person_id', 'debtor_external_data_id', 'partner_external_data', 'checkout_session_id', 'workflow_name', 'currency_code', 'expiration', 'debtor_sepa_mandate_uuid', 'uuid', 'rid', 'marked_as_fraud_at', 'created_at', 'updated_at', 'version', 'company_billing_address_uuid', 'creation_source', 'payment_method', 'acquiring_channel', 'intent'];
	}


	public function values(): array
	{
		$toString = static fn($value) => ($value instanceof \DateTimeImmutable) ? $value->format('Y-m-d H:i:s') : $value;

		return ['id' => $toString($this->id), 'external_code' => $toString($this->externalCode), 'state' => $toString($this->state), 'external_comment' => $toString($this->externalComment), 'internal_comment' => $toString($this->internalComment), 'invoice_number' => $toString($this->invoiceNumber), 'invoice_url' => $toString($this->invoiceUrl), 'proof_of_delivery_url' => $toString($this->proofOfDeliveryUrl), 'merchant_debtor_id' => $toString($this->merchantDebtorId), 'merchant_id' => $toString($this->merchantId), 'purchase_country_code' => $toString($this->purchaseCountryCode), 'delivery_address_id' => $toString($this->deliveryAddressId), 'debtor_person_id' => $toString($this->debtorPersonId), 'debtor_external_data_id' => $toString($this->debtorExternalDataId), 'partner_external_data' => $toString($this->partnerExternalData), 'checkout_session_id' => $toString($this->checkoutSessionId), 'workflow_name' => $toString($this->workflowName), 'currency_code' => $toString($this->currencyCode), 'expiration' => $toString($this->expiration), 'debtor_sepa_mandate_uuid' => $toString($this->debtorSepaMandateUuid), 'uuid' => $toString($this->uuid), 'rid' => $toString($this->rid), 'marked_as_fraud_at' => $toString($this->markedAsFraudAt), 'created_at' => $toString($this->createdAt), 'updated_at' => $toString($this->updatedAt), 'version' => $toString($this->version), 'company_billing_address_uuid' => $toString($this->companyBillingAddressUuid), 'creation_source' => $toString($this->creationSource), 'payment_method' => $toString($this->paymentMethod), 'acquiring_channel' => $toString($this->acquiringChannel), 'intent' => $toString($this->intent)];
	}


	public static function meta(): \SeederGenerator\DatabaseModel\Table
	{
		$columns[] = new \SeederGenerator\DatabaseModel\Column('id', 'int', 'NO', null, 'auto_increment', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('external_code', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('state', 'varchar(255)', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('external_comment', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('internal_comment', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('invoice_number', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('invoice_url', 'varchar(2048)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('proof_of_delivery_url', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('merchant_debtor_id', 'int', 'YES', null, '', 'merchants_debtors');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('merchant_id', 'int', 'YES', null, '', 'merchants');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('purchase_country_code', 'varchar(2)', 'NO', 'DE', '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('delivery_address_id', 'int', 'NO', null, '', 'addresses');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('debtor_person_id', 'int', 'NO', null, '', 'persons');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('debtor_external_data_id', 'int', 'NO', null, '', 'debtor_external_data');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('partner_external_data', 'json', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('checkout_session_id', 'int', 'YES', null, '', 'checkout_sessions');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('workflow_name', 'varchar(255)', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('currency_code', 'varchar(3)', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('expiration', 'datetime', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('debtor_sepa_mandate_uuid', 'varchar(36)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('uuid', 'char(36)', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('rid', 'varchar(36)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('marked_as_fraud_at', 'datetime', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('created_at', 'datetime', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('updated_at', 'datetime', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('version', 'smallint', 'NO', '1', '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('company_billing_address_uuid', 'varchar(36)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('creation_source', 'varchar(255)', 'NO', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('payment_method', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('acquiring_channel', 'varchar(255)', 'YES', null, '', '');
		$columns[] = new \SeederGenerator\DatabaseModel\Column('intent', 'varchar(255)', 'YES', null, '', '');

		return \SeederGenerator\DatabaseModel\Table::make('orders', $columns);
	}


	public function id(): int
	{
		return $this->id;
	}


	public function externalCode(): ?string
	{
		return $this->externalCode;
	}


	public function state(): string
	{
		return $this->state;
	}


	public function externalComment(): ?string
	{
		return $this->externalComment;
	}


	public function internalComment(): ?string
	{
		return $this->internalComment;
	}


	public function invoiceNumber(): ?string
	{
		return $this->invoiceNumber;
	}


	public function invoiceUrl(): ?string
	{
		return $this->invoiceUrl;
	}


	public function proofOfDeliveryUrl(): ?string
	{
		return $this->proofOfDeliveryUrl;
	}


	public function merchantDebtorId(): ?int
	{
		return $this->merchantDebtorId;
	}


	public function merchantId(): ?int
	{
		return $this->merchantId;
	}


	public function purchaseCountryCode(): string
	{
		return $this->purchaseCountryCode;
	}


	public function deliveryAddressId(): int
	{
		return $this->deliveryAddressId;
	}


	public function debtorPersonId(): int
	{
		return $this->debtorPersonId;
	}


	public function debtorExternalDataId(): int
	{
		return $this->debtorExternalDataId;
	}


	public function partnerExternalData(): ?array
	{
		return $this->partnerExternalData;
	}


	public function checkoutSessionId(): ?int
	{
		return $this->checkoutSessionId;
	}


	public function workflowName(): string
	{
		return $this->workflowName;
	}


	public function currencyCode(): string
	{
		return $this->currencyCode;
	}


	public function expiration(): ?\DateTimeImmutable
	{
		return $this->expiration;
	}


	public function debtorSepaMandateUuid(): ?string
	{
		return $this->debtorSepaMandateUuid;
	}


	public function uuid(): string
	{
		return $this->uuid;
	}


	public function rid(): ?string
	{
		return $this->rid;
	}


	public function markedAsFraudAt(): ?\DateTimeImmutable
	{
		return $this->markedAsFraudAt;
	}


	public function createdAt(): \DateTimeImmutable
	{
		return $this->createdAt;
	}


	public function updatedAt(): \DateTimeImmutable
	{
		return $this->updatedAt;
	}


	public function version(): int
	{
		return $this->version;
	}


	public function companyBillingAddressUuid(): ?string
	{
		return $this->companyBillingAddressUuid;
	}


	public function creationSource(): string
	{
		return $this->creationSource;
	}


	public function paymentMethod(): ?string
	{
		return $this->paymentMethod;
	}


	public function acquiringChannel(): ?string
	{
		return $this->acquiringChannel;
	}


	public function intent(): ?string
	{
		return $this->intent;
	}
}
